{"version":3,"file":"Embed-6102743a.js","sources":["../../node_modules/react-twitter-embed/dist/index.modern.js","../../src/components/Blocks/Embed.tsx"],"sourcesContent":["import React from 'react';\n\nvar twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nvar methodName = 'createTimeline';\n\nvar TwitterTimelineEmbed = function TwitterTimelineEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  var buildOptions = function buildOptions() {\n    var options = Object.assign({}, props.options);\n\n    if (props !== null && props !== void 0 && props.autoHeight) {\n      var _ref$current, _ref$current$parentNo;\n\n      options.height = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentNo = _ref$current.parentNode) === null || _ref$current$parentNo === void 0 ? void 0 : _ref$current$parentNo.offsetHeight;\n    }\n\n    options = Object.assign({}, options, {\n      theme: props === null || props === void 0 ? void 0 : props.theme,\n      linkColor: props === null || props === void 0 ? void 0 : props.linkColor,\n      borderColor: props === null || props === void 0 ? void 0 : props.borderColor,\n      lang: props === null || props === void 0 ? void 0 : props.lang,\n      tweetLimit: props === null || props === void 0 ? void 0 : props.tweetLimit,\n      ariaPolite: props === null || props === void 0 ? void 0 : props.ariaPolite\n    });\n    return options;\n  };\n\n  var buildChromeOptions = function buildChromeOptions(options) {\n    options.chrome = '';\n\n    if (props.noHeader) {\n      options.chrome = options.chrome + ' noheader';\n    }\n\n    if (props.noFooter) {\n      options.chrome = options.chrome + ' nofooter';\n    }\n\n    if (props.noBorders) {\n      options.chrome = options.chrome + ' noborders';\n    }\n\n    if (props.noScrollbar) {\n      options.chrome = options.chrome + ' noscrollbar';\n    }\n\n    if (props.transparent) {\n      options.chrome = options.chrome + ' transparent';\n    }\n\n    return options;\n  };\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName]) {\n          console.error(\"Method \" + methodName + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        var options = buildOptions();\n        options = buildChromeOptions(options);\n        window.twttr.widgets[methodName]({\n          sourceType: props.sourceType,\n          screenName: props.screenName,\n          userId: props.userId,\n          ownerScreenName: props.ownerScreenName,\n          slug: props.slug,\n          id: props.id || props.widgetId,\n          url: props.url\n        }, ref === null || ref === void 0 ? void 0 : ref.current, options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$1 = 'createShareButton';\n\nvar TwitterShareButton = function TwitterShareButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$1]) {\n          console.error(\"Method \" + methodName$1 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$1](props.url, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$2 = 'createFollowButton';\n\nvar TwitterFollowButton = function TwitterFollowButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$2]) {\n          console.error(\"Method \" + methodName$2 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$2](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$3 = 'createHashtagButton';\n\nvar TwitterHashtagButton = function TwitterHashtagButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$3]) {\n          console.error(\"Method \" + methodName$3 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$3](props.tag, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$4 = 'createMentionButton';\n\nvar TwitterMentionButton = function TwitterMentionButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$4]) {\n          console.error(\"Method \" + methodName$4 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$4](props.screenName, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$5 = 'createTweet';\n\nvar TwitterTweetEmbed = function TwitterTweetEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$5]) {\n          console.error(\"Method \" + methodName$5 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$5](props.tweetId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$6 = 'createMoment';\n\nvar TwitterMomentShare = function TwitterMomentShare(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$6]) {\n          console.error(\"Method \" + methodName$6 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$6](props.momentId, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$7 = 'createDMButton';\n\nvar TwitterDMButton = function TwitterDMButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$7]) {\n          console.error(\"Method \" + methodName$7 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$7](props.id, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          if (isComponentMounted) {\n            setLoading(false);\n\n            if (props.onLoad) {\n              props.onLoad(element);\n            }\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$8 = 'createVideo';\n\nvar TwitterVideoEmbed = function TwitterVideoEmbed(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$8]) {\n          console.error(\"Method \" + methodName$8 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$8](props.id, ref === null || ref === void 0 ? void 0 : ref.current).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nvar methodName$9 = 'createPeriscopeOnAirButton';\n\nvar TwitterOnAirButton = function TwitterOnAirButton(props) {\n  var ref = React.useRef(null);\n\n  var _React$useState = React.useState(true),\n      loading = _React$useState[0],\n      setLoading = _React$useState[1];\n\n  React.useEffect(function () {\n    var isComponentMounted = true;\n\n    var script = require('scriptjs');\n\n    script(twitterWidgetJs, 'twitter-embed', function () {\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr, aborting load');\n        return;\n      }\n\n      if (isComponentMounted) {\n        if (!window.twttr.widgets[methodName$9]) {\n          console.error(\"Method \" + methodName$9 + \" is not present anymore in twttr.widget api\");\n          return;\n        }\n\n        window.twttr.widgets[methodName$9](props.username, ref === null || ref === void 0 ? void 0 : ref.current, props.options).then(function (element) {\n          setLoading(false);\n\n          if (props.onLoad) {\n            props.onLoad(element);\n          }\n        });\n      }\n    });\n    return function () {\n      isComponentMounted = false;\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, loading && React.createElement(React.Fragment, null, props.placeholder), React.createElement(\"div\", {\n    ref: ref\n  }));\n};\n\nexport { TwitterDMButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterMomentShare, TwitterOnAirButton, TwitterShareButton, TwitterTimelineEmbed, TwitterTweetEmbed, TwitterVideoEmbed };\n//# sourceMappingURL=index.modern.js.map\n","import { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nimport { RichTexts } from \"../RichTexts/RichTexts.js\";\n\nimport type {\n  BlockComponentProps,\n  EmbedBlockObjectComponent,\n} from \"../../types/components.js\";\n\ntype Props = BlockComponentProps<EmbedBlockObjectComponent>;\n\nexport const Embed: React.FC<Props> = ({ block }) => {\n  const tweetId = getTweetId(block.embed.url);\n  if (tweetId) {\n    return <TwitterTweetEmbed options={{ theme: \"dark\" }} tweetId={tweetId} />;\n  }\n\n  return (\n    <div id={block.id} className=\"notion_embed\">\n      <iframe src={block.embed.url} title=\"notion embed content\" />\n      <div className=\"notion_caption notion_embed_caption\">\n        <RichTexts richTexts={block.embed.caption} />\n      </div>\n    </div>\n  );\n};\n\n/* https://qiita.com/ATTACK3500/items/091bedc2bf0596e08f17 */\nconst getTweetId = (url: string) => {\n  if (!isTweetUrl(url)) return null;\n\n  const regexes = [\n    /https?:\\/\\/twitter\\.com\\/(\\w+)\\/status(es)?\\/(\\d+)/,\n    /https?:\\/\\/twitter\\.com\\/(?:#!\\/)?(\\w+)\\/status(es)?\\/(\\d+)/,\n    /https?:\\/\\/mobile\\.twitter\\.com\\/(\\w+)\\/status(es)?\\/(\\d+)/,\n  ];\n\n  for (const regex of regexes) {\n    const match = url.match(regex);\n    if (match) {\n      return match[match.length - 1];\n    }\n  }\n\n  return null;\n};\n\nconst isTweetUrl = (url: string) => {\n  if (!isTwitterUrl(url)) return false;\n  const regex =\n    /^https?:\\/\\/(?:www\\.|mobile\\.)?twitter\\.com\\/(?:#!\\/)?([a-zA-Z0-9_]{1,15})\\/status(?:es)?\\/(\\d+)(?:\\?.*)?$/;\n  return regex.test(url);\n};\n\nconst isTwitterUrl = (url: string) => {\n  const twitterHostnames = [\n    \"twitter.com\",\n    \"www.twitter.com\",\n    \"mobile.twitter.com\",\n    // 'pbs.twimg.com',\n    // 't.co',\n  ];\n\n  try {\n    const parser = new URL(url);\n    return twitterHostnames.includes(parser.hostname);\n  } catch (error) {\n    return false;\n  }\n};\n"],"names":["twitterWidgetJs","methodName$5","TwitterTweetEmbed","props","ref","React","_React$useState","loading","setLoading","isComponentMounted","script","element","Embed","block","tweetId","getTweetId","jsx","jsxs","RichTexts","url","isTweetUrl","regexes","regex","match","isTwitterUrl","twitterHostnames","parser"],"mappings":"kIAEA,IAAIA,EAAkB,0CAsRlBC,EAAe,cAEfC,EAAoB,SAA2BC,EAAO,CACxD,IAAIC,EAAMC,EAAM,OAAO,IAAI,EAEvBC,EAAkBD,EAAM,SAAS,EAAI,EACrCE,EAAUD,EAAgB,CAAC,EAC3BE,EAAaF,EAAgB,CAAC,EAElC,OAAAD,EAAM,UAAU,UAAY,CAC1B,IAAII,EAAqB,GAErBC,EAAS,QAAQ,UAAU,EAE/B,OAAAA,EAAOV,EAAiB,gBAAiB,UAAY,CACnD,GAAI,CAAC,OAAO,MAAO,CACjB,QAAQ,MAAM,6CAA6C,EAC3D,MACD,CAED,GAAIS,EAAoB,CACtB,GAAI,CAAC,OAAO,MAAM,QAAQR,CAAY,EAAG,CACvC,QAAQ,MAAM,UAAYA,EAAe,6CAA6C,EACtF,MACD,CAED,OAAO,MAAM,QAAQA,CAAY,EAAEE,EAAM,QAASC,GAAQ,KAAyB,OAASA,EAAI,QAASD,EAAM,OAAO,EAAE,KAAK,SAAUQ,EAAS,CAC9IH,EAAW,EAAK,EAEZL,EAAM,QACRA,EAAM,OAAOQ,CAAO,CAEhC,CAAS,CACF,CACP,CAAK,EACM,UAAY,CACjBF,EAAqB,EAC3B,CACG,EAAE,CAAE,CAAA,EACEJ,EAAM,cAAcA,EAAM,SAAU,KAAME,GAAWF,EAAM,cAAcA,EAAM,SAAU,KAAMF,EAAM,WAAW,EAAGE,EAAM,cAAc,MAAO,CACnJ,IAAKD,CACN,CAAA,CAAC,CACJ,ECvTO,MAAAQ,EAAA,CAAA,CAAA,MAAAC,KAAA,CACL,MAAAC,EAAAC,EAAAF,EAAA,MAAA,GAAA,EACA,OAAAC,EACEE,EAAA,IAAAd,EAAA,CAAA,QAAA,CAAA,MAAA,MAAA,EAAA,QAAAY,CAAA,CAAA,EAGFG,EAAA,KAAA,MAAA,CAAA,GAAAJ,EAAA,GAAA,UAAA,eAAA,SAAA,CAEIG,MAAA,SAAA,CAAA,IAAAH,EAAA,MAAA,IAAA,MAAA,uBAAA,EAA2DG,EAAAA,IAAA,MAAA,CAAA,UAAA,sCAAA,SAAAA,EAAA,IAAAE,EAAA,CAAA,UAAAL,EAAA,MAAA,OAAA,CAAA,CAAA,CAAA,CAG3D,CAAA,CAAA,CAGN,EAGAE,EAAAI,GAAA,CACE,GAAA,CAAAC,EAAAD,CAAA,EAAsB,OAAA,KAEtB,MAAAE,EAAA,CAAgB,qDACd,8DACA,4DACA,EAGF,UAAAC,KAAAD,EAAA,CACE,MAAAE,EAAAJ,EAAA,MAAAG,CAAA,EACA,GAAAC,EACE,OAAAA,EAAAA,EAAA,OAAA,CAAA,CACF,CAGF,OAAA,IACF,EAEAH,EAAAD,GACEK,EAAAL,CAAA,EACA,6GAEA,KAAAA,CAAA,EAHwB,GAM1BK,EAAAL,GAAA,CACE,MAAAM,EAAA,CAAyB,cACvB,kBACA,oBACA,EAKF,GAAA,CACE,MAAAC,EAAA,IAAA,IAAAP,CAAA,EACA,OAAAM,EAAA,SAAAC,EAAA,QAAA,CAAgD,MAAA,CAEhD,MAAA,EAAO,CAEX","x_google_ignoreList":[0]}