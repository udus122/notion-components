{"version":3,"file":"Annotations-dd8c7303.js","sources":["../../src/components/RichTexts/Annotations.tsx"],"sourcesContent":["import { Bold } from \"./Bold.js\";\nimport { Color } from \"./Color.js\";\nimport { InlineCode } from \"./InlineCode.js\";\nimport { Italic } from \"./Italic.js\";\nimport { Strikethrough } from \"./Strikethrough.js\";\nimport { Underline } from \"./Underline.js\";\n\nimport type { RichTextItemResponse } from \"@notionhq/client/build/src/api-endpoints.js\";\n\nconst defaultAnnotationMapper = {\n  color: Color,\n  bold: Bold,\n  italic: Italic,\n  strikethrough: Strikethrough,\n  underline: Underline,\n  code: InlineCode,\n};\n\n// FIXME: cannot customize annotation order\nexport const Annotations: React.FC<{\n  richTextItem: RichTextItemResponse;\n  children: React.ReactNode;\n  customAnnotationMapper?: object;\n}> = ({ richTextItem, children, customAnnotationMapper = {} }) => {\n  const annotationMapper = {\n    ...defaultAnnotationMapper,\n    ...customAnnotationMapper,\n  };\n\n  let element = children;\n\n  if (richTextItem.annotations.bold) {\n    const BoldAnnotation = annotationMapper[\"bold\"];\n    element = (\n      <BoldAnnotation richTextItem={richTextItem}>{element}</BoldAnnotation>\n    );\n  }\n  if (richTextItem.annotations.italic) {\n    const ItalicAnnotation = annotationMapper[\"italic\"];\n    element = (\n      <ItalicAnnotation richTextItem={richTextItem}>{element}</ItalicAnnotation>\n    );\n  }\n  if (richTextItem.annotations.strikethrough) {\n    const StrikethroughAnnotation = annotationMapper[\"strikethrough\"];\n    element = (\n      <StrikethroughAnnotation richTextItem={richTextItem}>\n        {element}\n      </StrikethroughAnnotation>\n    );\n  }\n  if (richTextItem.annotations.underline) {\n    const UnderlineAnnotation = annotationMapper[\"underline\"];\n    element = (\n      <UnderlineAnnotation richTextItem={richTextItem}>\n        {element}\n      </UnderlineAnnotation>\n    );\n  }\n  if (richTextItem.annotations.code) {\n    const InlineCodeAnnotation = annotationMapper[\"code\"];\n    element = (\n      <InlineCodeAnnotation richTextItem={richTextItem}>\n        {element}\n      </InlineCodeAnnotation>\n    );\n  }\n  if (richTextItem?.annotations.color) {\n    const ColorAnnotation = annotationMapper[\"color\"];\n    element = (\n      <ColorAnnotation richTextItem={richTextItem}>{element}</ColorAnnotation>\n    );\n  }\n  return <>{element}</>;\n};\n"],"names":["defaultAnnotationMapper","Color","Bold","Italic","Strikethrough","Underline","InlineCode","Annotations","richTextItem","children","customAnnotationMapper","annotationMapper","element","BoldAnnotation","jsx","ItalicAnnotation","StrikethroughAnnotation","UnderlineAnnotation","InlineCodeAnnotation","ColorAnnotation","Fragment"],"mappings":"+SASA,MAAAA,EAAA,CAAgC,MAAAC,EACvB,KAAAC,EACD,OAAAC,EACE,cAAAC,EACO,UAAAC,EACJ,KAAAC,CAEb,EAGOC,EAAA,CAAA,CAAA,aAAAC,EAAA,SAAAC,EAAA,uBAAAC,EAAA,CAAA,CAAA,IAAA,CAKL,MAAAC,EAAA,CAAyB,GAAAX,EACpB,GAAAU,CACA,EAGL,IAAAE,EAAAH,EAEA,GAAAD,EAAA,YAAA,KAAA,CACE,MAAAK,EAAAF,EAAA,KACAC,EAAAE,EAAA,IAAAD,EAAA,CAAA,aAAAL,EAAA,SAAAI,CAAA,CAAA,CACuD,CAGzD,GAAAJ,EAAA,YAAA,OAAA,CACE,MAAAO,EAAAJ,EAAA,OACAC,EAAAE,EAAA,IAAAC,EAAA,CAAA,aAAAP,EAAA,SAAAI,CAAA,CAAA,CACyD,CAG3D,GAAAJ,EAAA,YAAA,cAAA,CACE,MAAAQ,EAAAL,EAAA,cACAC,EAAAE,EAAA,IAAAE,EAAA,CAAA,aAAAR,EAAA,SAAAI,CAAA,CAAA,CAGE,CAGJ,GAAAJ,EAAA,YAAA,UAAA,CACE,MAAAS,EAAAN,EAAA,UACAC,EAAAE,EAAA,IAAAG,EAAA,CAAA,aAAAT,EAAA,SAAAI,CAAA,CAAA,CAGE,CAGJ,GAAAJ,EAAA,YAAA,KAAA,CACE,MAAAU,EAAAP,EAAA,KACAC,EAAAE,EAAA,IAAAI,EAAA,CAAA,aAAAV,EAAA,SAAAI,CAAA,CAAA,CAGE,CAGJ,GAAAJ,GAAA,MAAAA,EAAA,YAAA,MAAA,CACE,MAAAW,EAAAR,EAAA,MACAC,EAAAE,EAAA,IAAAK,EAAA,CAAA,aAAAX,EAAA,SAAAI,CAAA,CAAA,CACwD,CAG1D,OAAAE,EAAA,IAAAM,EAAA,SAAA,CAAA,SAAAR,CAAA,CAAA,CACF"}