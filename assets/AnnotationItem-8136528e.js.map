{"version":3,"file":"AnnotationItem-8136528e.js","sources":["../../src/components/RichText/Annotation/AnnotationItem.tsx"],"sourcesContent":["import { useMapper } from \"../../hooks.js\";\n\nimport { Bold } from \"./Bold.js\";\nimport { Color } from \"./Color.js\";\nimport { InlineCode } from \"./InlineCode.js\";\nimport { Italic } from \"./Italic.js\";\nimport { Strikethrough } from \"./Strikethrough.js\";\nimport { Underline } from \"./Underline.js\";\n\nimport type { RichTextItem } from \"../../../types/notion/richText/richTextItem.js\";\nimport type { FC, ReactNode } from \"react\";\n\nexport const AnnotationItem: FC<{\n  richTextItem: RichTextItem;\n  children: ReactNode;\n}> = ({ richTextItem, children }) => {\n  const { annotationMapper } = useMapper();\n\n  const mapper = {\n    bold: Bold,\n    underline: Underline,\n    strikethrough: Strikethrough,\n    italic: Italic,\n    code: InlineCode,\n    color: Color,\n    ...annotationMapper,\n  };\n\n  let element = children;\n\n  if (richTextItem.annotations.bold) {\n    const BoldAnnotation = mapper[\"bold\"];\n    element = (\n      <BoldAnnotation richTextItem={richTextItem}>{element}</BoldAnnotation>\n    );\n  }\n  if (richTextItem.annotations.italic) {\n    const ItalicAnnotation = mapper[\"italic\"];\n    element = (\n      <ItalicAnnotation richTextItem={richTextItem}>{element}</ItalicAnnotation>\n    );\n  }\n  if (richTextItem.annotations.strikethrough) {\n    const StrikethroughAnnotation = mapper[\"strikethrough\"];\n    element = (\n      <StrikethroughAnnotation richTextItem={richTextItem}>\n        {element}\n      </StrikethroughAnnotation>\n    );\n  }\n  if (richTextItem.annotations.underline) {\n    const UnderlineAnnotation = mapper[\"underline\"];\n    element = (\n      <UnderlineAnnotation richTextItem={richTextItem}>\n        {element}\n      </UnderlineAnnotation>\n    );\n  }\n  if (richTextItem.annotations.code) {\n    const InlineCodeAnnotation = mapper[\"code\"];\n    element = (\n      <InlineCodeAnnotation richTextItem={richTextItem}>\n        {element}\n      </InlineCodeAnnotation>\n    );\n  }\n  if (richTextItem?.annotations.color) {\n    const ColorAnnotation = mapper[\"color\"];\n    element = (\n      <ColorAnnotation richTextItem={richTextItem}>{element}</ColorAnnotation>\n    );\n  }\n  return element;\n};\n"],"names":["AnnotationItem","richTextItem","children","annotationMapper","useMapper","mapper","Bold","Underline","Strikethrough","Italic","InlineCode","Color","element","BoldAnnotation","jsx","ItalicAnnotation","StrikethroughAnnotation","UnderlineAnnotation","InlineCodeAnnotation","ColorAnnotation"],"mappings":"uVAYO,MAAAA,EAAA,CAAA,CAAA,aAAAC,EAAA,SAAAC,KAAA,CAIL,KAAA,CAAA,iBAAAC,GAAAC,IAEAC,EAAA,CAAe,KAAAC,EACP,UAAAC,EACK,cAAAC,EACI,OAAAC,EACP,KAAAC,EACF,MAAAC,EACC,GAAAR,CACJ,EAGL,IAAAS,EAAAV,EAEA,GAAAD,EAAA,YAAA,KAAA,CACE,MAAAY,EAAAR,EAAA,KACAO,EAAAE,EAAA,IAAAD,EAAA,CAAA,aAAAZ,EAAA,SAAAW,CAAA,CAAA,CACuD,CAGzD,GAAAX,EAAA,YAAA,OAAA,CACE,MAAAc,EAAAV,EAAA,OACAO,EAAAE,EAAA,IAAAC,EAAA,CAAA,aAAAd,EAAA,SAAAW,CAAA,CAAA,CACyD,CAG3D,GAAAX,EAAA,YAAA,cAAA,CACE,MAAAe,EAAAX,EAAA,cACAO,EAAAE,EAAA,IAAAE,EAAA,CAAA,aAAAf,EAAA,SAAAW,CAAA,CAAA,CAGE,CAGJ,GAAAX,EAAA,YAAA,UAAA,CACE,MAAAgB,EAAAZ,EAAA,UACAO,EAAAE,EAAA,IAAAG,EAAA,CAAA,aAAAhB,EAAA,SAAAW,CAAA,CAAA,CAGE,CAGJ,GAAAX,EAAA,YAAA,KAAA,CACE,MAAAiB,EAAAb,EAAA,KACAO,EAAAE,EAAA,IAAAI,EAAA,CAAA,aAAAjB,EAAA,SAAAW,CAAA,CAAA,CAGE,CAGJ,GAAAX,GAAA,MAAAA,EAAA,YAAA,MAAA,CACE,MAAAkB,EAAAd,EAAA,MACAO,EAAAE,EAAA,IAAAK,EAAA,CAAA,aAAAlB,EAAA,SAAAW,CAAA,CAAA,CACwD,CAG1D,OAAAA,CACF"}